"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const endpoint_util_1 = __importDefault(require("@alicloud/endpoint-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class GetBrandChEcomRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            imageUrl: 'ImageUrl',
            serviceCode: 'ServiceCode',
            text: 'Text',
        };
    }
    static types() {
        return {
            imageUrl: 'string',
            serviceCode: 'string',
            text: 'string',
        };
    }
}
exports.GetBrandChEcomRequest = GetBrandChEcomRequest;
class GetBrandChEcomResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetBrandChEcomResponseBody = GetBrandChEcomResponseBody;
class GetBrandChEcomResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetBrandChEcomResponseBody,
        };
    }
}
exports.GetBrandChEcomResponse = GetBrandChEcomResponse;
class GetCateChEcomRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            imageUrl: 'ImageUrl',
            serviceCode: 'ServiceCode',
            text: 'Text',
        };
    }
    static types() {
        return {
            imageUrl: 'string',
            serviceCode: 'string',
            text: 'string',
        };
    }
}
exports.GetCateChEcomRequest = GetCateChEcomRequest;
class GetCateChEcomResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetCateChEcomResponseBody = GetCateChEcomResponseBody;
class GetCateChEcomResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetCateChEcomResponseBody,
        };
    }
}
exports.GetCateChEcomResponse = GetCateChEcomResponse;
class GetCheckDuplicationChMedicalRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            originQ: 'OriginQ',
            originT: 'OriginT',
            serviceCode: 'ServiceCode',
        };
    }
    static types() {
        return {
            originQ: 'string',
            originT: 'string',
            serviceCode: 'string',
        };
    }
}
exports.GetCheckDuplicationChMedicalRequest = GetCheckDuplicationChMedicalRequest;
class GetCheckDuplicationChMedicalResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetCheckDuplicationChMedicalResponseBody = GetCheckDuplicationChMedicalResponseBody;
class GetCheckDuplicationChMedicalResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetCheckDuplicationChMedicalResponseBody,
        };
    }
}
exports.GetCheckDuplicationChMedicalResponse = GetCheckDuplicationChMedicalResponse;
class GetDiagnosisChMedicalRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'Name',
            serviceCode: 'ServiceCode',
        };
    }
    static types() {
        return {
            name: 'string',
            serviceCode: 'string',
        };
    }
}
exports.GetDiagnosisChMedicalRequest = GetDiagnosisChMedicalRequest;
class GetDiagnosisChMedicalResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetDiagnosisChMedicalResponseBody = GetDiagnosisChMedicalResponseBody;
class GetDiagnosisChMedicalResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetDiagnosisChMedicalResponseBody,
        };
    }
}
exports.GetDiagnosisChMedicalResponse = GetDiagnosisChMedicalResponse;
class GetDpChEcomRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            serviceCode: 'ServiceCode',
            text: 'Text',
        };
    }
    static types() {
        return {
            serviceCode: 'string',
            text: 'string',
        };
    }
}
exports.GetDpChEcomRequest = GetDpChEcomRequest;
class GetDpChEcomResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetDpChEcomResponseBody = GetDpChEcomResponseBody;
class GetDpChEcomResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetDpChEcomResponseBody,
        };
    }
}
exports.GetDpChEcomResponse = GetDpChEcomResponse;
class GetDpChGeneralCTBRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            serviceCode: 'ServiceCode',
            text: 'Text',
        };
    }
    static types() {
        return {
            serviceCode: 'string',
            text: 'string',
        };
    }
}
exports.GetDpChGeneralCTBRequest = GetDpChGeneralCTBRequest;
class GetDpChGeneralCTBResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetDpChGeneralCTBResponseBody = GetDpChGeneralCTBResponseBody;
class GetDpChGeneralCTBResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetDpChGeneralCTBResponseBody,
        };
    }
}
exports.GetDpChGeneralCTBResponse = GetDpChGeneralCTBResponse;
class GetDpChGeneralStanfordRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            serviceCode: 'ServiceCode',
            text: 'Text',
        };
    }
    static types() {
        return {
            serviceCode: 'string',
            text: 'string',
        };
    }
}
exports.GetDpChGeneralStanfordRequest = GetDpChGeneralStanfordRequest;
class GetDpChGeneralStanfordResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetDpChGeneralStanfordResponseBody = GetDpChGeneralStanfordResponseBody;
class GetDpChGeneralStanfordResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetDpChGeneralStanfordResponseBody,
        };
    }
}
exports.GetDpChGeneralStanfordResponse = GetDpChGeneralStanfordResponse;
class GetEcChGeneralRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            serviceCode: 'ServiceCode',
            text: 'Text',
        };
    }
    static types() {
        return {
            serviceCode: 'string',
            text: 'string',
        };
    }
}
exports.GetEcChGeneralRequest = GetEcChGeneralRequest;
class GetEcChGeneralResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetEcChGeneralResponseBody = GetEcChGeneralResponseBody;
class GetEcChGeneralResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetEcChGeneralResponseBody,
        };
    }
}
exports.GetEcChGeneralResponse = GetEcChGeneralResponse;
class GetEcEnGeneralRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            serviceCode: 'ServiceCode',
            text: 'Text',
        };
    }
    static types() {
        return {
            serviceCode: 'string',
            text: 'string',
        };
    }
}
exports.GetEcEnGeneralRequest = GetEcEnGeneralRequest;
class GetEcEnGeneralResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetEcEnGeneralResponseBody = GetEcEnGeneralResponseBody;
class GetEcEnGeneralResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetEcEnGeneralResponseBody,
        };
    }
}
exports.GetEcEnGeneralResponse = GetEcEnGeneralResponse;
class GetItemPubChEcomRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            imageUrl: 'ImageUrl',
            serviceCode: 'ServiceCode',
            text: 'Text',
        };
    }
    static types() {
        return {
            imageUrl: 'string',
            serviceCode: 'string',
            text: 'string',
        };
    }
}
exports.GetItemPubChEcomRequest = GetItemPubChEcomRequest;
class GetItemPubChEcomResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetItemPubChEcomResponseBody = GetItemPubChEcomResponseBody;
class GetItemPubChEcomResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetItemPubChEcomResponseBody,
        };
    }
}
exports.GetItemPubChEcomResponse = GetItemPubChEcomResponse;
class GetKeywordChEcomRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            serviceCode: 'ServiceCode',
            text: 'Text',
        };
    }
    static types() {
        return {
            serviceCode: 'string',
            text: 'string',
        };
    }
}
exports.GetKeywordChEcomRequest = GetKeywordChEcomRequest;
class GetKeywordChEcomResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetKeywordChEcomResponseBody = GetKeywordChEcomResponseBody;
class GetKeywordChEcomResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetKeywordChEcomResponseBody,
        };
    }
}
exports.GetKeywordChEcomResponse = GetKeywordChEcomResponse;
class GetKeywordEnEcomRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            serviceCode: 'ServiceCode',
            text: 'Text',
        };
    }
    static types() {
        return {
            serviceCode: 'string',
            text: 'string',
        };
    }
}
exports.GetKeywordEnEcomRequest = GetKeywordEnEcomRequest;
class GetKeywordEnEcomResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetKeywordEnEcomResponseBody = GetKeywordEnEcomResponseBody;
class GetKeywordEnEcomResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetKeywordEnEcomResponseBody,
        };
    }
}
exports.GetKeywordEnEcomResponse = GetKeywordEnEcomResponse;
class GetMedicineChMedicalRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            factory: 'Factory',
            name: 'Name',
            serviceCode: 'ServiceCode',
            specification: 'Specification',
            unit: 'Unit',
        };
    }
    static types() {
        return {
            factory: 'string',
            name: 'string',
            serviceCode: 'string',
            specification: 'string',
            unit: 'string',
        };
    }
}
exports.GetMedicineChMedicalRequest = GetMedicineChMedicalRequest;
class GetMedicineChMedicalResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetMedicineChMedicalResponseBody = GetMedicineChMedicalResponseBody;
class GetMedicineChMedicalResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetMedicineChMedicalResponseBody,
        };
    }
}
exports.GetMedicineChMedicalResponse = GetMedicineChMedicalResponse;
class GetNerChEcomRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lexerId: 'LexerId',
            serviceCode: 'ServiceCode',
            text: 'Text',
        };
    }
    static types() {
        return {
            lexerId: 'string',
            serviceCode: 'string',
            text: 'string',
        };
    }
}
exports.GetNerChEcomRequest = GetNerChEcomRequest;
class GetNerChEcomResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetNerChEcomResponseBody = GetNerChEcomResponseBody;
class GetNerChEcomResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetNerChEcomResponseBody,
        };
    }
}
exports.GetNerChEcomResponse = GetNerChEcomResponse;
class GetNerChMedicalRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            serviceCode: 'ServiceCode',
            text: 'Text',
        };
    }
    static types() {
        return {
            serviceCode: 'string',
            text: 'string',
        };
    }
}
exports.GetNerChMedicalRequest = GetNerChMedicalRequest;
class GetNerChMedicalResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetNerChMedicalResponseBody = GetNerChMedicalResponseBody;
class GetNerChMedicalResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetNerChMedicalResponseBody,
        };
    }
}
exports.GetNerChMedicalResponse = GetNerChMedicalResponse;
class GetNerCustomizedChEcomRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lexerId: 'LexerId',
            serviceCode: 'ServiceCode',
            text: 'Text',
        };
    }
    static types() {
        return {
            lexerId: 'string',
            serviceCode: 'string',
            text: 'string',
        };
    }
}
exports.GetNerCustomizedChEcomRequest = GetNerCustomizedChEcomRequest;
class GetNerCustomizedChEcomResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetNerCustomizedChEcomResponseBody = GetNerCustomizedChEcomResponseBody;
class GetNerCustomizedChEcomResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetNerCustomizedChEcomResponseBody,
        };
    }
}
exports.GetNerCustomizedChEcomResponse = GetNerCustomizedChEcomResponse;
class GetNerCustomizedSeaEcomRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            language: 'Language',
            serviceCode: 'ServiceCode',
            text: 'Text',
        };
    }
    static types() {
        return {
            language: 'string',
            serviceCode: 'string',
            text: 'string',
        };
    }
}
exports.GetNerCustomizedSeaEcomRequest = GetNerCustomizedSeaEcomRequest;
class GetNerCustomizedSeaEcomResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetNerCustomizedSeaEcomResponseBody = GetNerCustomizedSeaEcomResponseBody;
class GetNerCustomizedSeaEcomResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetNerCustomizedSeaEcomResponseBody,
        };
    }
}
exports.GetNerCustomizedSeaEcomResponse = GetNerCustomizedSeaEcomResponse;
class GetOperationChMedicalRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'Name',
            serviceCode: 'ServiceCode',
        };
    }
    static types() {
        return {
            name: 'string',
            serviceCode: 'string',
        };
    }
}
exports.GetOperationChMedicalRequest = GetOperationChMedicalRequest;
class GetOperationChMedicalResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetOperationChMedicalResponseBody = GetOperationChMedicalResponseBody;
class GetOperationChMedicalResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetOperationChMedicalResponseBody,
        };
    }
}
exports.GetOperationChMedicalResponse = GetOperationChMedicalResponse;
class GetPosChEcomRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            outType: 'OutType',
            serviceCode: 'ServiceCode',
            text: 'Text',
            tokenizerId: 'TokenizerId',
        };
    }
    static types() {
        return {
            outType: 'string',
            serviceCode: 'string',
            text: 'string',
            tokenizerId: 'string',
        };
    }
}
exports.GetPosChEcomRequest = GetPosChEcomRequest;
class GetPosChEcomResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetPosChEcomResponseBody = GetPosChEcomResponseBody;
class GetPosChEcomResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetPosChEcomResponseBody,
        };
    }
}
exports.GetPosChEcomResponse = GetPosChEcomResponse;
class GetPosChGeneralRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            outType: 'OutType',
            serviceCode: 'ServiceCode',
            text: 'Text',
            tokenizerId: 'TokenizerId',
        };
    }
    static types() {
        return {
            outType: 'string',
            serviceCode: 'string',
            text: 'string',
            tokenizerId: 'string',
        };
    }
}
exports.GetPosChGeneralRequest = GetPosChGeneralRequest;
class GetPosChGeneralResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetPosChGeneralResponseBody = GetPosChGeneralResponseBody;
class GetPosChGeneralResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetPosChGeneralResponseBody,
        };
    }
}
exports.GetPosChGeneralResponse = GetPosChGeneralResponse;
class GetPriceChEcomRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            serviceCode: 'ServiceCode',
            text: 'Text',
        };
    }
    static types() {
        return {
            serviceCode: 'string',
            text: 'string',
        };
    }
}
exports.GetPriceChEcomRequest = GetPriceChEcomRequest;
class GetPriceChEcomResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetPriceChEcomResponseBody = GetPriceChEcomResponseBody;
class GetPriceChEcomResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetPriceChEcomResponseBody,
        };
    }
}
exports.GetPriceChEcomResponse = GetPriceChEcomResponse;
class GetSaChGeneralRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            serviceCode: 'ServiceCode',
            text: 'Text',
        };
    }
    static types() {
        return {
            serviceCode: 'string',
            text: 'string',
        };
    }
}
exports.GetSaChGeneralRequest = GetSaChGeneralRequest;
class GetSaChGeneralResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetSaChGeneralResponseBody = GetSaChGeneralResponseBody;
class GetSaChGeneralResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSaChGeneralResponseBody,
        };
    }
}
exports.GetSaChGeneralResponse = GetSaChGeneralResponse;
class GetSaSeaEcomRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            language: 'Language',
            serviceCode: 'ServiceCode',
            text: 'Text',
        };
    }
    static types() {
        return {
            language: 'string',
            serviceCode: 'string',
            text: 'string',
        };
    }
}
exports.GetSaSeaEcomRequest = GetSaSeaEcomRequest;
class GetSaSeaEcomResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetSaSeaEcomResponseBody = GetSaSeaEcomResponseBody;
class GetSaSeaEcomResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSaSeaEcomResponseBody,
        };
    }
}
exports.GetSaSeaEcomResponse = GetSaSeaEcomResponse;
class GetSimilarityChMedicalRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            originQ: 'OriginQ',
            originT: 'OriginT',
            serviceCode: 'ServiceCode',
        };
    }
    static types() {
        return {
            originQ: 'string',
            originT: 'string',
            serviceCode: 'string',
        };
    }
}
exports.GetSimilarityChMedicalRequest = GetSimilarityChMedicalRequest;
class GetSimilarityChMedicalResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetSimilarityChMedicalResponseBody = GetSimilarityChMedicalResponseBody;
class GetSimilarityChMedicalResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSimilarityChMedicalResponseBody,
        };
    }
}
exports.GetSimilarityChMedicalResponse = GetSimilarityChMedicalResponse;
class GetSummaryChEcomRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            serviceCode: 'ServiceCode',
            text: 'Text',
        };
    }
    static types() {
        return {
            serviceCode: 'string',
            text: 'string',
        };
    }
}
exports.GetSummaryChEcomRequest = GetSummaryChEcomRequest;
class GetSummaryChEcomResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetSummaryChEcomResponseBody = GetSummaryChEcomResponseBody;
class GetSummaryChEcomResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSummaryChEcomResponseBody,
        };
    }
}
exports.GetSummaryChEcomResponse = GetSummaryChEcomResponse;
class GetTcChEcomRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            serviceCode: 'ServiceCode',
            text: 'Text',
        };
    }
    static types() {
        return {
            serviceCode: 'string',
            text: 'string',
        };
    }
}
exports.GetTcChEcomRequest = GetTcChEcomRequest;
class GetTcChEcomResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetTcChEcomResponseBody = GetTcChEcomResponseBody;
class GetTcChEcomResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetTcChEcomResponseBody,
        };
    }
}
exports.GetTcChEcomResponse = GetTcChEcomResponse;
class GetTcChGeneralRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            serviceCode: 'ServiceCode',
            text: 'Text',
        };
    }
    static types() {
        return {
            serviceCode: 'string',
            text: 'string',
        };
    }
}
exports.GetTcChGeneralRequest = GetTcChGeneralRequest;
class GetTcChGeneralResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetTcChGeneralResponseBody = GetTcChGeneralResponseBody;
class GetTcChGeneralResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetTcChGeneralResponseBody,
        };
    }
}
exports.GetTcChGeneralResponse = GetTcChGeneralResponse;
class GetTsChEcomRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            originQ: 'OriginQ',
            originT: 'OriginT',
            serviceCode: 'ServiceCode',
            type: 'Type',
        };
    }
    static types() {
        return {
            originQ: 'string',
            originT: 'string',
            serviceCode: 'string',
            type: 'string',
        };
    }
}
exports.GetTsChEcomRequest = GetTsChEcomRequest;
class GetTsChEcomResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetTsChEcomResponseBody = GetTsChEcomResponseBody;
class GetTsChEcomResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetTsChEcomResponseBody,
        };
    }
}
exports.GetTsChEcomResponse = GetTsChEcomResponse;
class GetWeChCommentRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operation: 'Operation',
            serviceCode: 'ServiceCode',
            size: 'Size',
            text: 'Text',
            tokenizerId: 'TokenizerId',
            type: 'Type',
        };
    }
    static types() {
        return {
            operation: 'string',
            serviceCode: 'string',
            size: 'string',
            text: 'string',
            tokenizerId: 'string',
            type: 'string',
        };
    }
}
exports.GetWeChCommentRequest = GetWeChCommentRequest;
class GetWeChCommentResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetWeChCommentResponseBody = GetWeChCommentResponseBody;
class GetWeChCommentResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetWeChCommentResponseBody,
        };
    }
}
exports.GetWeChCommentResponse = GetWeChCommentResponse;
class GetWeChEcomRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operation: 'Operation',
            serviceCode: 'ServiceCode',
            size: 'Size',
            text: 'Text',
            tokenizerId: 'TokenizerId',
            type: 'Type',
        };
    }
    static types() {
        return {
            operation: 'string',
            serviceCode: 'string',
            size: 'string',
            text: 'string',
            tokenizerId: 'string',
            type: 'string',
        };
    }
}
exports.GetWeChEcomRequest = GetWeChEcomRequest;
class GetWeChEcomResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetWeChEcomResponseBody = GetWeChEcomResponseBody;
class GetWeChEcomResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetWeChEcomResponseBody,
        };
    }
}
exports.GetWeChEcomResponse = GetWeChEcomResponse;
class GetWeChEntertainmentRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operation: 'Operation',
            serviceCode: 'ServiceCode',
            size: 'Size',
            text: 'Text',
            tokenizerId: 'TokenizerId',
            type: 'Type',
        };
    }
    static types() {
        return {
            operation: 'string',
            serviceCode: 'string',
            size: 'string',
            text: 'string',
            tokenizerId: 'string',
            type: 'string',
        };
    }
}
exports.GetWeChEntertainmentRequest = GetWeChEntertainmentRequest;
class GetWeChEntertainmentResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetWeChEntertainmentResponseBody = GetWeChEntertainmentResponseBody;
class GetWeChEntertainmentResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetWeChEntertainmentResponseBody,
        };
    }
}
exports.GetWeChEntertainmentResponse = GetWeChEntertainmentResponse;
class GetWeChGeneralRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operation: 'Operation',
            serviceCode: 'ServiceCode',
            size: 'Size',
            text: 'Text',
            type: 'Type',
        };
    }
    static types() {
        return {
            operation: 'string',
            serviceCode: 'string',
            size: 'string',
            text: 'string',
            type: 'string',
        };
    }
}
exports.GetWeChGeneralRequest = GetWeChGeneralRequest;
class GetWeChGeneralResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetWeChGeneralResponseBody = GetWeChGeneralResponseBody;
class GetWeChGeneralResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetWeChGeneralResponseBody,
        };
    }
}
exports.GetWeChGeneralResponse = GetWeChGeneralResponse;
class GetWeChSearchRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operation: 'Operation',
            serviceCode: 'ServiceCode',
            size: 'Size',
            text: 'Text',
            tokenizerId: 'TokenizerId',
            type: 'Type',
        };
    }
    static types() {
        return {
            operation: 'string',
            serviceCode: 'string',
            size: 'string',
            text: 'string',
            tokenizerId: 'string',
            type: 'string',
        };
    }
}
exports.GetWeChSearchRequest = GetWeChSearchRequest;
class GetWeChSearchResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetWeChSearchResponseBody = GetWeChSearchResponseBody;
class GetWeChSearchResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetWeChSearchResponseBody,
        };
    }
}
exports.GetWeChSearchResponse = GetWeChSearchResponse;
class GetWsChGeneralRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            outType: 'OutType',
            serviceCode: 'ServiceCode',
            text: 'Text',
            tokenizerId: 'TokenizerId',
        };
    }
    static types() {
        return {
            outType: 'string',
            serviceCode: 'string',
            text: 'string',
            tokenizerId: 'string',
        };
    }
}
exports.GetWsChGeneralRequest = GetWsChGeneralRequest;
class GetWsChGeneralResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetWsChGeneralResponseBody = GetWsChGeneralResponseBody;
class GetWsChGeneralResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetWsChGeneralResponseBody,
        };
    }
}
exports.GetWsChGeneralResponse = GetWsChGeneralResponse;
class GetWsCustomizedChEcomCommentRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            outType: 'OutType',
            serviceCode: 'ServiceCode',
            text: 'Text',
            tokenizerId: 'TokenizerId',
        };
    }
    static types() {
        return {
            outType: 'string',
            serviceCode: 'string',
            text: 'string',
            tokenizerId: 'string',
        };
    }
}
exports.GetWsCustomizedChEcomCommentRequest = GetWsCustomizedChEcomCommentRequest;
class GetWsCustomizedChEcomCommentResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetWsCustomizedChEcomCommentResponseBody = GetWsCustomizedChEcomCommentResponseBody;
class GetWsCustomizedChEcomCommentResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetWsCustomizedChEcomCommentResponseBody,
        };
    }
}
exports.GetWsCustomizedChEcomCommentResponse = GetWsCustomizedChEcomCommentResponse;
class GetWsCustomizedChEcomContentRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            outType: 'OutType',
            serviceCode: 'ServiceCode',
            text: 'Text',
            tokenizerId: 'TokenizerId',
        };
    }
    static types() {
        return {
            outType: 'string',
            serviceCode: 'string',
            text: 'string',
            tokenizerId: 'string',
        };
    }
}
exports.GetWsCustomizedChEcomContentRequest = GetWsCustomizedChEcomContentRequest;
class GetWsCustomizedChEcomContentResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetWsCustomizedChEcomContentResponseBody = GetWsCustomizedChEcomContentResponseBody;
class GetWsCustomizedChEcomContentResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetWsCustomizedChEcomContentResponseBody,
        };
    }
}
exports.GetWsCustomizedChEcomContentResponse = GetWsCustomizedChEcomContentResponse;
class GetWsCustomizedChEcomTitleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            outType: 'OutType',
            serviceCode: 'ServiceCode',
            text: 'Text',
            tokenizerId: 'TokenizerId',
        };
    }
    static types() {
        return {
            outType: 'string',
            serviceCode: 'string',
            text: 'string',
            tokenizerId: 'string',
        };
    }
}
exports.GetWsCustomizedChEcomTitleRequest = GetWsCustomizedChEcomTitleRequest;
class GetWsCustomizedChEcomTitleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetWsCustomizedChEcomTitleResponseBody = GetWsCustomizedChEcomTitleResponseBody;
class GetWsCustomizedChEcomTitleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetWsCustomizedChEcomTitleResponseBody,
        };
    }
}
exports.GetWsCustomizedChEcomTitleResponse = GetWsCustomizedChEcomTitleResponse;
class GetWsCustomizedChEntertainmentRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            outType: 'OutType',
            serviceCode: 'ServiceCode',
            text: 'Text',
            tokenizerId: 'TokenizerId',
        };
    }
    static types() {
        return {
            outType: 'string',
            serviceCode: 'string',
            text: 'string',
            tokenizerId: 'string',
        };
    }
}
exports.GetWsCustomizedChEntertainmentRequest = GetWsCustomizedChEntertainmentRequest;
class GetWsCustomizedChEntertainmentResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetWsCustomizedChEntertainmentResponseBody = GetWsCustomizedChEntertainmentResponseBody;
class GetWsCustomizedChEntertainmentResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetWsCustomizedChEntertainmentResponseBody,
        };
    }
}
exports.GetWsCustomizedChEntertainmentResponse = GetWsCustomizedChEntertainmentResponse;
class GetWsCustomizedChGeneralRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            outType: 'OutType',
            serviceCode: 'ServiceCode',
            text: 'Text',
            tokenizerId: 'TokenizerId',
        };
    }
    static types() {
        return {
            outType: 'string',
            serviceCode: 'string',
            text: 'string',
            tokenizerId: 'string',
        };
    }
}
exports.GetWsCustomizedChGeneralRequest = GetWsCustomizedChGeneralRequest;
class GetWsCustomizedChGeneralResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetWsCustomizedChGeneralResponseBody = GetWsCustomizedChGeneralResponseBody;
class GetWsCustomizedChGeneralResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetWsCustomizedChGeneralResponseBody,
        };
    }
}
exports.GetWsCustomizedChGeneralResponse = GetWsCustomizedChGeneralResponse;
class GetWsCustomizedChO2ORequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            outType: 'OutType',
            serviceCode: 'ServiceCode',
            text: 'Text',
            tokenizerId: 'TokenizerId',
        };
    }
    static types() {
        return {
            outType: 'string',
            serviceCode: 'string',
            text: 'string',
            tokenizerId: 'string',
        };
    }
}
exports.GetWsCustomizedChO2ORequest = GetWsCustomizedChO2ORequest;
class GetWsCustomizedChO2OResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetWsCustomizedChO2OResponseBody = GetWsCustomizedChO2OResponseBody;
class GetWsCustomizedChO2OResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetWsCustomizedChO2OResponseBody,
        };
    }
}
exports.GetWsCustomizedChO2OResponse = GetWsCustomizedChO2OResponse;
class GetWsCustomizedSeaEcomRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            language: 'Language',
            serviceCode: 'ServiceCode',
            text: 'Text',
        };
    }
    static types() {
        return {
            language: 'string',
            serviceCode: 'string',
            text: 'string',
        };
    }
}
exports.GetWsCustomizedSeaEcomRequest = GetWsCustomizedSeaEcomRequest;
class GetWsCustomizedSeaEcomResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetWsCustomizedSeaEcomResponseBody = GetWsCustomizedSeaEcomResponseBody;
class GetWsCustomizedSeaEcomResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetWsCustomizedSeaEcomResponseBody,
        };
    }
}
exports.GetWsCustomizedSeaEcomResponse = GetWsCustomizedSeaEcomResponse;
class GetWsCustomizedSeaGeneralRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            language: 'Language',
            serviceCode: 'ServiceCode',
            text: 'Text',
        };
    }
    static types() {
        return {
            language: 'string',
            serviceCode: 'string',
            text: 'string',
        };
    }
}
exports.GetWsCustomizedSeaGeneralRequest = GetWsCustomizedSeaGeneralRequest;
class GetWsCustomizedSeaGeneralResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: 'string',
            requestId: 'string',
        };
    }
}
exports.GetWsCustomizedSeaGeneralResponseBody = GetWsCustomizedSeaGeneralResponseBody;
class GetWsCustomizedSeaGeneralResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetWsCustomizedSeaGeneralResponseBody,
        };
    }
}
exports.GetWsCustomizedSeaGeneralResponse = GetWsCustomizedSeaGeneralResponse;
class OpenAlinlpServiceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            orderId: 'OrderId',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            orderId: 'string',
            requestId: 'string',
        };
    }
}
exports.OpenAlinlpServiceResponseBody = OpenAlinlpServiceResponseBody;
class OpenAlinlpServiceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: OpenAlinlpServiceResponseBody,
        };
    }
}
exports.OpenAlinlpServiceResponse = OpenAlinlpServiceResponse;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._endpointRule = "regional";
        this.checkConfig(config);
        this._endpoint = this.getEndpoint("alinlp", this._regionId, this._endpointRule, this._network, this._suffix, this._endpointMap, this._endpoint);
    }
    getEndpoint(productId, regionId, endpointRule, network, suffix, endpointMap, endpoint) {
        if (!tea_util_1.default.empty(endpoint)) {
            return endpoint;
        }
        if (!tea_util_1.default.isUnset(endpointMap) && !tea_util_1.default.empty(endpointMap[regionId])) {
            return endpointMap[regionId];
        }
        return endpoint_util_1.default.getEndpointRules(productId, regionId, endpointRule, network, suffix);
    }
    async getBrandChEcomWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.imageUrl)) {
            body["ImageUrl"] = request.imageUrl;
        }
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetBrandChEcom",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetBrandChEcomResponse({}));
    }
    async getBrandChEcom(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getBrandChEcomWithOptions(request, runtime);
    }
    async getCateChEcomWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.imageUrl)) {
            body["ImageUrl"] = request.imageUrl;
        }
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetCateChEcom",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetCateChEcomResponse({}));
    }
    async getCateChEcom(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getCateChEcomWithOptions(request, runtime);
    }
    async getCheckDuplicationChMedicalWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.originQ)) {
            body["OriginQ"] = request.originQ;
        }
        if (!tea_util_1.default.isUnset(request.originT)) {
            body["OriginT"] = request.originT;
        }
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetCheckDuplicationChMedical",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetCheckDuplicationChMedicalResponse({}));
    }
    async getCheckDuplicationChMedical(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getCheckDuplicationChMedicalWithOptions(request, runtime);
    }
    async getDiagnosisChMedicalWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.name)) {
            body["Name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetDiagnosisChMedical",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetDiagnosisChMedicalResponse({}));
    }
    async getDiagnosisChMedical(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getDiagnosisChMedicalWithOptions(request, runtime);
    }
    async getDpChEcomWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetDpChEcom",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetDpChEcomResponse({}));
    }
    async getDpChEcom(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getDpChEcomWithOptions(request, runtime);
    }
    async getDpChGeneralCTBWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetDpChGeneralCTB",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetDpChGeneralCTBResponse({}));
    }
    async getDpChGeneralCTB(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getDpChGeneralCTBWithOptions(request, runtime);
    }
    async getDpChGeneralStanfordWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetDpChGeneralStanford",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetDpChGeneralStanfordResponse({}));
    }
    async getDpChGeneralStanford(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getDpChGeneralStanfordWithOptions(request, runtime);
    }
    async getEcChGeneralWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetEcChGeneral",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetEcChGeneralResponse({}));
    }
    async getEcChGeneral(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getEcChGeneralWithOptions(request, runtime);
    }
    async getEcEnGeneralWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetEcEnGeneral",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetEcEnGeneralResponse({}));
    }
    async getEcEnGeneral(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getEcEnGeneralWithOptions(request, runtime);
    }
    async getItemPubChEcomWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.imageUrl)) {
            body["ImageUrl"] = request.imageUrl;
        }
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetItemPubChEcom",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetItemPubChEcomResponse({}));
    }
    async getItemPubChEcom(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getItemPubChEcomWithOptions(request, runtime);
    }
    async getKeywordChEcomWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetKeywordChEcom",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetKeywordChEcomResponse({}));
    }
    async getKeywordChEcom(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getKeywordChEcomWithOptions(request, runtime);
    }
    async getKeywordEnEcomWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetKeywordEnEcom",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetKeywordEnEcomResponse({}));
    }
    async getKeywordEnEcom(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getKeywordEnEcomWithOptions(request, runtime);
    }
    async getMedicineChMedicalWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.factory)) {
            body["Factory"] = request.factory;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["Name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.specification)) {
            body["Specification"] = request.specification;
        }
        if (!tea_util_1.default.isUnset(request.unit)) {
            body["Unit"] = request.unit;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetMedicineChMedical",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetMedicineChMedicalResponse({}));
    }
    async getMedicineChMedical(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getMedicineChMedicalWithOptions(request, runtime);
    }
    async getNerChEcomWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.lexerId)) {
            body["LexerId"] = request.lexerId;
        }
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetNerChEcom",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetNerChEcomResponse({}));
    }
    async getNerChEcom(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getNerChEcomWithOptions(request, runtime);
    }
    async getNerChMedicalWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetNerChMedical",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetNerChMedicalResponse({}));
    }
    async getNerChMedical(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getNerChMedicalWithOptions(request, runtime);
    }
    async getNerCustomizedChEcomWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.lexerId)) {
            body["LexerId"] = request.lexerId;
        }
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetNerCustomizedChEcom",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetNerCustomizedChEcomResponse({}));
    }
    async getNerCustomizedChEcom(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getNerCustomizedChEcomWithOptions(request, runtime);
    }
    async getNerCustomizedSeaEcomWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.language)) {
            body["Language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetNerCustomizedSeaEcom",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetNerCustomizedSeaEcomResponse({}));
    }
    async getNerCustomizedSeaEcom(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getNerCustomizedSeaEcomWithOptions(request, runtime);
    }
    async getOperationChMedicalWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.name)) {
            body["Name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetOperationChMedical",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetOperationChMedicalResponse({}));
    }
    async getOperationChMedical(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getOperationChMedicalWithOptions(request, runtime);
    }
    async getPosChEcomWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.outType)) {
            body["OutType"] = request.outType;
        }
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        if (!tea_util_1.default.isUnset(request.tokenizerId)) {
            body["TokenizerId"] = request.tokenizerId;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetPosChEcom",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetPosChEcomResponse({}));
    }
    async getPosChEcom(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getPosChEcomWithOptions(request, runtime);
    }
    async getPosChGeneralWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.outType)) {
            body["OutType"] = request.outType;
        }
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        if (!tea_util_1.default.isUnset(request.tokenizerId)) {
            body["TokenizerId"] = request.tokenizerId;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetPosChGeneral",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetPosChGeneralResponse({}));
    }
    async getPosChGeneral(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getPosChGeneralWithOptions(request, runtime);
    }
    async getPriceChEcomWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetPriceChEcom",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetPriceChEcomResponse({}));
    }
    async getPriceChEcom(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getPriceChEcomWithOptions(request, runtime);
    }
    async getSaChGeneralWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetSaChGeneral",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetSaChGeneralResponse({}));
    }
    async getSaChGeneral(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getSaChGeneralWithOptions(request, runtime);
    }
    async getSaSeaEcomWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.language)) {
            body["Language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetSaSeaEcom",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetSaSeaEcomResponse({}));
    }
    async getSaSeaEcom(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getSaSeaEcomWithOptions(request, runtime);
    }
    async getSimilarityChMedicalWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.originQ)) {
            body["OriginQ"] = request.originQ;
        }
        if (!tea_util_1.default.isUnset(request.originT)) {
            body["OriginT"] = request.originT;
        }
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetSimilarityChMedical",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetSimilarityChMedicalResponse({}));
    }
    async getSimilarityChMedical(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getSimilarityChMedicalWithOptions(request, runtime);
    }
    async getSummaryChEcomWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetSummaryChEcom",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetSummaryChEcomResponse({}));
    }
    async getSummaryChEcom(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getSummaryChEcomWithOptions(request, runtime);
    }
    async getTcChEcomWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetTcChEcom",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetTcChEcomResponse({}));
    }
    async getTcChEcom(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getTcChEcomWithOptions(request, runtime);
    }
    async getTcChGeneralWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetTcChGeneral",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetTcChGeneralResponse({}));
    }
    async getTcChGeneral(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getTcChGeneralWithOptions(request, runtime);
    }
    async getTsChEcomWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.originQ)) {
            body["OriginQ"] = request.originQ;
        }
        if (!tea_util_1.default.isUnset(request.originT)) {
            body["OriginT"] = request.originT;
        }
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["Type"] = request.type;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetTsChEcom",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetTsChEcomResponse({}));
    }
    async getTsChEcom(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getTsChEcomWithOptions(request, runtime);
    }
    async getWeChCommentWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.operation)) {
            body["Operation"] = request.operation;
        }
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.size)) {
            body["Size"] = request.size;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        if (!tea_util_1.default.isUnset(request.tokenizerId)) {
            body["TokenizerId"] = request.tokenizerId;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["Type"] = request.type;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetWeChComment",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetWeChCommentResponse({}));
    }
    async getWeChComment(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getWeChCommentWithOptions(request, runtime);
    }
    async getWeChEcomWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.operation)) {
            body["Operation"] = request.operation;
        }
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.size)) {
            body["Size"] = request.size;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        if (!tea_util_1.default.isUnset(request.tokenizerId)) {
            body["TokenizerId"] = request.tokenizerId;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["Type"] = request.type;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetWeChEcom",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetWeChEcomResponse({}));
    }
    async getWeChEcom(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getWeChEcomWithOptions(request, runtime);
    }
    async getWeChEntertainmentWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.operation)) {
            body["Operation"] = request.operation;
        }
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.size)) {
            body["Size"] = request.size;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        if (!tea_util_1.default.isUnset(request.tokenizerId)) {
            body["TokenizerId"] = request.tokenizerId;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["Type"] = request.type;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetWeChEntertainment",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetWeChEntertainmentResponse({}));
    }
    async getWeChEntertainment(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getWeChEntertainmentWithOptions(request, runtime);
    }
    async getWeChGeneralWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.operation)) {
            body["Operation"] = request.operation;
        }
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.size)) {
            body["Size"] = request.size;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["Type"] = request.type;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetWeChGeneral",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetWeChGeneralResponse({}));
    }
    async getWeChGeneral(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getWeChGeneralWithOptions(request, runtime);
    }
    async getWeChSearchWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.operation)) {
            body["Operation"] = request.operation;
        }
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.size)) {
            body["Size"] = request.size;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        if (!tea_util_1.default.isUnset(request.tokenizerId)) {
            body["TokenizerId"] = request.tokenizerId;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["Type"] = request.type;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetWeChSearch",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetWeChSearchResponse({}));
    }
    async getWeChSearch(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getWeChSearchWithOptions(request, runtime);
    }
    async getWsChGeneralWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.outType)) {
            body["OutType"] = request.outType;
        }
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        if (!tea_util_1.default.isUnset(request.tokenizerId)) {
            body["TokenizerId"] = request.tokenizerId;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetWsChGeneral",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetWsChGeneralResponse({}));
    }
    async getWsChGeneral(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getWsChGeneralWithOptions(request, runtime);
    }
    async getWsCustomizedChEcomCommentWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.outType)) {
            body["OutType"] = request.outType;
        }
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        if (!tea_util_1.default.isUnset(request.tokenizerId)) {
            body["TokenizerId"] = request.tokenizerId;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetWsCustomizedChEcomComment",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetWsCustomizedChEcomCommentResponse({}));
    }
    async getWsCustomizedChEcomComment(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getWsCustomizedChEcomCommentWithOptions(request, runtime);
    }
    async getWsCustomizedChEcomContentWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.outType)) {
            body["OutType"] = request.outType;
        }
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        if (!tea_util_1.default.isUnset(request.tokenizerId)) {
            body["TokenizerId"] = request.tokenizerId;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetWsCustomizedChEcomContent",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetWsCustomizedChEcomContentResponse({}));
    }
    async getWsCustomizedChEcomContent(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getWsCustomizedChEcomContentWithOptions(request, runtime);
    }
    async getWsCustomizedChEcomTitleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.outType)) {
            body["OutType"] = request.outType;
        }
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        if (!tea_util_1.default.isUnset(request.tokenizerId)) {
            body["TokenizerId"] = request.tokenizerId;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetWsCustomizedChEcomTitle",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetWsCustomizedChEcomTitleResponse({}));
    }
    async getWsCustomizedChEcomTitle(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getWsCustomizedChEcomTitleWithOptions(request, runtime);
    }
    async getWsCustomizedChEntertainmentWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.outType)) {
            body["OutType"] = request.outType;
        }
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        if (!tea_util_1.default.isUnset(request.tokenizerId)) {
            body["TokenizerId"] = request.tokenizerId;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetWsCustomizedChEntertainment",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetWsCustomizedChEntertainmentResponse({}));
    }
    async getWsCustomizedChEntertainment(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getWsCustomizedChEntertainmentWithOptions(request, runtime);
    }
    async getWsCustomizedChGeneralWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.outType)) {
            body["OutType"] = request.outType;
        }
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        if (!tea_util_1.default.isUnset(request.tokenizerId)) {
            body["TokenizerId"] = request.tokenizerId;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetWsCustomizedChGeneral",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetWsCustomizedChGeneralResponse({}));
    }
    async getWsCustomizedChGeneral(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getWsCustomizedChGeneralWithOptions(request, runtime);
    }
    async getWsCustomizedChO2OWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.outType)) {
            body["OutType"] = request.outType;
        }
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        if (!tea_util_1.default.isUnset(request.tokenizerId)) {
            body["TokenizerId"] = request.tokenizerId;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetWsCustomizedChO2O",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetWsCustomizedChO2OResponse({}));
    }
    async getWsCustomizedChO2O(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getWsCustomizedChO2OWithOptions(request, runtime);
    }
    async getWsCustomizedSeaEcomWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.language)) {
            body["Language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetWsCustomizedSeaEcom",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetWsCustomizedSeaEcomResponse({}));
    }
    async getWsCustomizedSeaEcom(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getWsCustomizedSeaEcomWithOptions(request, runtime);
    }
    async getWsCustomizedSeaGeneralWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.language)) {
            body["Language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.serviceCode)) {
            body["ServiceCode"] = request.serviceCode;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["Text"] = request.text;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetWsCustomizedSeaGeneral",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetWsCustomizedSeaGeneralResponse({}));
    }
    async getWsCustomizedSeaGeneral(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getWsCustomizedSeaGeneralWithOptions(request, runtime);
    }
    async openAlinlpServiceWithOptions(runtime) {
        let req = new $OpenApi.OpenApiRequest({});
        let params = new $OpenApi.Params({
            action: "OpenAlinlpService",
            version: "2020-06-29",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new OpenAlinlpServiceResponse({}));
    }
    async openAlinlpService() {
        let runtime = new $Util.RuntimeOptions({});
        return await this.openAlinlpServiceWithOptions(runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map