/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class GetBrandChEcomRequest extends $tea.Model {
    imageUrl?: string;
    serviceCode?: string;
    text?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBrandChEcomResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBrandChEcomResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetBrandChEcomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCateChEcomRequest extends $tea.Model {
    imageUrl?: string;
    serviceCode?: string;
    text?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCateChEcomResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCateChEcomResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetCateChEcomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCheckDuplicationChMedicalRequest extends $tea.Model {
    originQ?: string;
    originT?: string;
    serviceCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCheckDuplicationChMedicalResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCheckDuplicationChMedicalResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetCheckDuplicationChMedicalResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDiagnosisChMedicalRequest extends $tea.Model {
    name?: string;
    serviceCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDiagnosisChMedicalResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDiagnosisChMedicalResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetDiagnosisChMedicalResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDpChEcomRequest extends $tea.Model {
    serviceCode?: string;
    text?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDpChEcomResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDpChEcomResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetDpChEcomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDpChGeneralCTBRequest extends $tea.Model {
    serviceCode?: string;
    text?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDpChGeneralCTBResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDpChGeneralCTBResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetDpChGeneralCTBResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDpChGeneralStanfordRequest extends $tea.Model {
    serviceCode?: string;
    text?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDpChGeneralStanfordResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDpChGeneralStanfordResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetDpChGeneralStanfordResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEcChGeneralRequest extends $tea.Model {
    serviceCode?: string;
    text?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEcChGeneralResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEcChGeneralResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetEcChGeneralResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEcEnGeneralRequest extends $tea.Model {
    serviceCode?: string;
    text?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEcEnGeneralResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEcEnGeneralResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetEcEnGeneralResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetItemPubChEcomRequest extends $tea.Model {
    imageUrl?: string;
    serviceCode?: string;
    text?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetItemPubChEcomResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetItemPubChEcomResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetItemPubChEcomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetKeywordChEcomRequest extends $tea.Model {
    serviceCode?: string;
    text?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetKeywordChEcomResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetKeywordChEcomResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetKeywordChEcomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetKeywordEnEcomRequest extends $tea.Model {
    serviceCode?: string;
    text?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetKeywordEnEcomResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetKeywordEnEcomResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetKeywordEnEcomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMedicineChMedicalRequest extends $tea.Model {
    factory?: string;
    name?: string;
    serviceCode?: string;
    specification?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMedicineChMedicalResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMedicineChMedicalResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetMedicineChMedicalResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNerChEcomRequest extends $tea.Model {
    lexerId?: string;
    serviceCode?: string;
    text?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNerChEcomResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNerChEcomResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetNerChEcomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNerChMedicalRequest extends $tea.Model {
    serviceCode?: string;
    text?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNerChMedicalResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNerChMedicalResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetNerChMedicalResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNerCustomizedChEcomRequest extends $tea.Model {
    lexerId?: string;
    serviceCode?: string;
    text?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNerCustomizedChEcomResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNerCustomizedChEcomResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetNerCustomizedChEcomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNerCustomizedSeaEcomRequest extends $tea.Model {
    language?: string;
    serviceCode?: string;
    text?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNerCustomizedSeaEcomResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNerCustomizedSeaEcomResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetNerCustomizedSeaEcomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOperationChMedicalRequest extends $tea.Model {
    name?: string;
    serviceCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOperationChMedicalResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOperationChMedicalResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetOperationChMedicalResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPosChEcomRequest extends $tea.Model {
    outType?: string;
    serviceCode?: string;
    text?: string;
    tokenizerId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPosChEcomResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPosChEcomResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetPosChEcomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPosChGeneralRequest extends $tea.Model {
    outType?: string;
    serviceCode?: string;
    text?: string;
    tokenizerId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPosChGeneralResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPosChGeneralResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetPosChGeneralResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPriceChEcomRequest extends $tea.Model {
    serviceCode?: string;
    text?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPriceChEcomResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPriceChEcomResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetPriceChEcomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSaChGeneralRequest extends $tea.Model {
    serviceCode?: string;
    text?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSaChGeneralResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSaChGeneralResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetSaChGeneralResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSaSeaEcomRequest extends $tea.Model {
    language?: string;
    serviceCode?: string;
    text?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSaSeaEcomResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSaSeaEcomResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetSaSeaEcomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimilarityChMedicalRequest extends $tea.Model {
    originQ?: string;
    originT?: string;
    serviceCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimilarityChMedicalResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimilarityChMedicalResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetSimilarityChMedicalResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSummaryChEcomRequest extends $tea.Model {
    serviceCode?: string;
    text?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSummaryChEcomResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSummaryChEcomResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetSummaryChEcomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTcChEcomRequest extends $tea.Model {
    serviceCode?: string;
    text?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTcChEcomResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTcChEcomResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetTcChEcomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTcChGeneralRequest extends $tea.Model {
    serviceCode?: string;
    text?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTcChGeneralResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTcChGeneralResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetTcChGeneralResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTsChEcomRequest extends $tea.Model {
    originQ?: string;
    originT?: string;
    serviceCode?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTsChEcomResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTsChEcomResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetTsChEcomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWeChCommentRequest extends $tea.Model {
    operation?: string;
    serviceCode?: string;
    size?: string;
    text?: string;
    tokenizerId?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWeChCommentResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWeChCommentResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetWeChCommentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWeChEcomRequest extends $tea.Model {
    operation?: string;
    serviceCode?: string;
    size?: string;
    text?: string;
    tokenizerId?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWeChEcomResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWeChEcomResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetWeChEcomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWeChEntertainmentRequest extends $tea.Model {
    operation?: string;
    serviceCode?: string;
    size?: string;
    text?: string;
    tokenizerId?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWeChEntertainmentResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWeChEntertainmentResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetWeChEntertainmentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWeChGeneralRequest extends $tea.Model {
    operation?: string;
    serviceCode?: string;
    size?: string;
    text?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWeChGeneralResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWeChGeneralResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetWeChGeneralResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWeChSearchRequest extends $tea.Model {
    operation?: string;
    serviceCode?: string;
    size?: string;
    text?: string;
    tokenizerId?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWeChSearchResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWeChSearchResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetWeChSearchResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWsChGeneralRequest extends $tea.Model {
    outType?: string;
    serviceCode?: string;
    text?: string;
    tokenizerId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWsChGeneralResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWsChGeneralResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetWsChGeneralResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWsCustomizedChEcomCommentRequest extends $tea.Model {
    outType?: string;
    serviceCode?: string;
    text?: string;
    tokenizerId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWsCustomizedChEcomCommentResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWsCustomizedChEcomCommentResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetWsCustomizedChEcomCommentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWsCustomizedChEcomContentRequest extends $tea.Model {
    outType?: string;
    serviceCode?: string;
    text?: string;
    tokenizerId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWsCustomizedChEcomContentResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWsCustomizedChEcomContentResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetWsCustomizedChEcomContentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWsCustomizedChEcomTitleRequest extends $tea.Model {
    outType?: string;
    serviceCode?: string;
    text?: string;
    tokenizerId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWsCustomizedChEcomTitleResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWsCustomizedChEcomTitleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetWsCustomizedChEcomTitleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWsCustomizedChEntertainmentRequest extends $tea.Model {
    outType?: string;
    serviceCode?: string;
    text?: string;
    tokenizerId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWsCustomizedChEntertainmentResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWsCustomizedChEntertainmentResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetWsCustomizedChEntertainmentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWsCustomizedChGeneralRequest extends $tea.Model {
    outType?: string;
    serviceCode?: string;
    text?: string;
    tokenizerId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWsCustomizedChGeneralResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWsCustomizedChGeneralResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetWsCustomizedChGeneralResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWsCustomizedChO2ORequest extends $tea.Model {
    outType?: string;
    serviceCode?: string;
    text?: string;
    tokenizerId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWsCustomizedChO2OResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWsCustomizedChO2OResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetWsCustomizedChO2OResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWsCustomizedSeaEcomRequest extends $tea.Model {
    language?: string;
    serviceCode?: string;
    text?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWsCustomizedSeaEcomResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWsCustomizedSeaEcomResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetWsCustomizedSeaEcomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWsCustomizedSeaGeneralRequest extends $tea.Model {
    language?: string;
    serviceCode?: string;
    text?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWsCustomizedSeaGeneralResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWsCustomizedSeaGeneralResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetWsCustomizedSeaGeneralResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenAlinlpServiceResponseBody extends $tea.Model {
    orderId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenAlinlpServiceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: OpenAlinlpServiceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: {
        [key: string]: string;
    }, endpoint: string): string;
    getBrandChEcomWithOptions(request: GetBrandChEcomRequest, runtime: $Util.RuntimeOptions): Promise<GetBrandChEcomResponse>;
    getBrandChEcom(request: GetBrandChEcomRequest): Promise<GetBrandChEcomResponse>;
    getCateChEcomWithOptions(request: GetCateChEcomRequest, runtime: $Util.RuntimeOptions): Promise<GetCateChEcomResponse>;
    getCateChEcom(request: GetCateChEcomRequest): Promise<GetCateChEcomResponse>;
    getCheckDuplicationChMedicalWithOptions(request: GetCheckDuplicationChMedicalRequest, runtime: $Util.RuntimeOptions): Promise<GetCheckDuplicationChMedicalResponse>;
    getCheckDuplicationChMedical(request: GetCheckDuplicationChMedicalRequest): Promise<GetCheckDuplicationChMedicalResponse>;
    getDiagnosisChMedicalWithOptions(request: GetDiagnosisChMedicalRequest, runtime: $Util.RuntimeOptions): Promise<GetDiagnosisChMedicalResponse>;
    getDiagnosisChMedical(request: GetDiagnosisChMedicalRequest): Promise<GetDiagnosisChMedicalResponse>;
    getDpChEcomWithOptions(request: GetDpChEcomRequest, runtime: $Util.RuntimeOptions): Promise<GetDpChEcomResponse>;
    getDpChEcom(request: GetDpChEcomRequest): Promise<GetDpChEcomResponse>;
    getDpChGeneralCTBWithOptions(request: GetDpChGeneralCTBRequest, runtime: $Util.RuntimeOptions): Promise<GetDpChGeneralCTBResponse>;
    getDpChGeneralCTB(request: GetDpChGeneralCTBRequest): Promise<GetDpChGeneralCTBResponse>;
    getDpChGeneralStanfordWithOptions(request: GetDpChGeneralStanfordRequest, runtime: $Util.RuntimeOptions): Promise<GetDpChGeneralStanfordResponse>;
    getDpChGeneralStanford(request: GetDpChGeneralStanfordRequest): Promise<GetDpChGeneralStanfordResponse>;
    getEcChGeneralWithOptions(request: GetEcChGeneralRequest, runtime: $Util.RuntimeOptions): Promise<GetEcChGeneralResponse>;
    getEcChGeneral(request: GetEcChGeneralRequest): Promise<GetEcChGeneralResponse>;
    getEcEnGeneralWithOptions(request: GetEcEnGeneralRequest, runtime: $Util.RuntimeOptions): Promise<GetEcEnGeneralResponse>;
    getEcEnGeneral(request: GetEcEnGeneralRequest): Promise<GetEcEnGeneralResponse>;
    getItemPubChEcomWithOptions(request: GetItemPubChEcomRequest, runtime: $Util.RuntimeOptions): Promise<GetItemPubChEcomResponse>;
    getItemPubChEcom(request: GetItemPubChEcomRequest): Promise<GetItemPubChEcomResponse>;
    getKeywordChEcomWithOptions(request: GetKeywordChEcomRequest, runtime: $Util.RuntimeOptions): Promise<GetKeywordChEcomResponse>;
    getKeywordChEcom(request: GetKeywordChEcomRequest): Promise<GetKeywordChEcomResponse>;
    getKeywordEnEcomWithOptions(request: GetKeywordEnEcomRequest, runtime: $Util.RuntimeOptions): Promise<GetKeywordEnEcomResponse>;
    getKeywordEnEcom(request: GetKeywordEnEcomRequest): Promise<GetKeywordEnEcomResponse>;
    getMedicineChMedicalWithOptions(request: GetMedicineChMedicalRequest, runtime: $Util.RuntimeOptions): Promise<GetMedicineChMedicalResponse>;
    getMedicineChMedical(request: GetMedicineChMedicalRequest): Promise<GetMedicineChMedicalResponse>;
    getNerChEcomWithOptions(request: GetNerChEcomRequest, runtime: $Util.RuntimeOptions): Promise<GetNerChEcomResponse>;
    getNerChEcom(request: GetNerChEcomRequest): Promise<GetNerChEcomResponse>;
    getNerChMedicalWithOptions(request: GetNerChMedicalRequest, runtime: $Util.RuntimeOptions): Promise<GetNerChMedicalResponse>;
    getNerChMedical(request: GetNerChMedicalRequest): Promise<GetNerChMedicalResponse>;
    getNerCustomizedChEcomWithOptions(request: GetNerCustomizedChEcomRequest, runtime: $Util.RuntimeOptions): Promise<GetNerCustomizedChEcomResponse>;
    getNerCustomizedChEcom(request: GetNerCustomizedChEcomRequest): Promise<GetNerCustomizedChEcomResponse>;
    getNerCustomizedSeaEcomWithOptions(request: GetNerCustomizedSeaEcomRequest, runtime: $Util.RuntimeOptions): Promise<GetNerCustomizedSeaEcomResponse>;
    getNerCustomizedSeaEcom(request: GetNerCustomizedSeaEcomRequest): Promise<GetNerCustomizedSeaEcomResponse>;
    getOperationChMedicalWithOptions(request: GetOperationChMedicalRequest, runtime: $Util.RuntimeOptions): Promise<GetOperationChMedicalResponse>;
    getOperationChMedical(request: GetOperationChMedicalRequest): Promise<GetOperationChMedicalResponse>;
    getPosChEcomWithOptions(request: GetPosChEcomRequest, runtime: $Util.RuntimeOptions): Promise<GetPosChEcomResponse>;
    getPosChEcom(request: GetPosChEcomRequest): Promise<GetPosChEcomResponse>;
    getPosChGeneralWithOptions(request: GetPosChGeneralRequest, runtime: $Util.RuntimeOptions): Promise<GetPosChGeneralResponse>;
    getPosChGeneral(request: GetPosChGeneralRequest): Promise<GetPosChGeneralResponse>;
    getPriceChEcomWithOptions(request: GetPriceChEcomRequest, runtime: $Util.RuntimeOptions): Promise<GetPriceChEcomResponse>;
    getPriceChEcom(request: GetPriceChEcomRequest): Promise<GetPriceChEcomResponse>;
    getSaChGeneralWithOptions(request: GetSaChGeneralRequest, runtime: $Util.RuntimeOptions): Promise<GetSaChGeneralResponse>;
    getSaChGeneral(request: GetSaChGeneralRequest): Promise<GetSaChGeneralResponse>;
    getSaSeaEcomWithOptions(request: GetSaSeaEcomRequest, runtime: $Util.RuntimeOptions): Promise<GetSaSeaEcomResponse>;
    getSaSeaEcom(request: GetSaSeaEcomRequest): Promise<GetSaSeaEcomResponse>;
    getSimilarityChMedicalWithOptions(request: GetSimilarityChMedicalRequest, runtime: $Util.RuntimeOptions): Promise<GetSimilarityChMedicalResponse>;
    getSimilarityChMedical(request: GetSimilarityChMedicalRequest): Promise<GetSimilarityChMedicalResponse>;
    getSummaryChEcomWithOptions(request: GetSummaryChEcomRequest, runtime: $Util.RuntimeOptions): Promise<GetSummaryChEcomResponse>;
    getSummaryChEcom(request: GetSummaryChEcomRequest): Promise<GetSummaryChEcomResponse>;
    getTcChEcomWithOptions(request: GetTcChEcomRequest, runtime: $Util.RuntimeOptions): Promise<GetTcChEcomResponse>;
    getTcChEcom(request: GetTcChEcomRequest): Promise<GetTcChEcomResponse>;
    getTcChGeneralWithOptions(request: GetTcChGeneralRequest, runtime: $Util.RuntimeOptions): Promise<GetTcChGeneralResponse>;
    getTcChGeneral(request: GetTcChGeneralRequest): Promise<GetTcChGeneralResponse>;
    getTsChEcomWithOptions(request: GetTsChEcomRequest, runtime: $Util.RuntimeOptions): Promise<GetTsChEcomResponse>;
    getTsChEcom(request: GetTsChEcomRequest): Promise<GetTsChEcomResponse>;
    getWeChCommentWithOptions(request: GetWeChCommentRequest, runtime: $Util.RuntimeOptions): Promise<GetWeChCommentResponse>;
    getWeChComment(request: GetWeChCommentRequest): Promise<GetWeChCommentResponse>;
    getWeChEcomWithOptions(request: GetWeChEcomRequest, runtime: $Util.RuntimeOptions): Promise<GetWeChEcomResponse>;
    getWeChEcom(request: GetWeChEcomRequest): Promise<GetWeChEcomResponse>;
    getWeChEntertainmentWithOptions(request: GetWeChEntertainmentRequest, runtime: $Util.RuntimeOptions): Promise<GetWeChEntertainmentResponse>;
    getWeChEntertainment(request: GetWeChEntertainmentRequest): Promise<GetWeChEntertainmentResponse>;
    getWeChGeneralWithOptions(request: GetWeChGeneralRequest, runtime: $Util.RuntimeOptions): Promise<GetWeChGeneralResponse>;
    getWeChGeneral(request: GetWeChGeneralRequest): Promise<GetWeChGeneralResponse>;
    getWeChSearchWithOptions(request: GetWeChSearchRequest, runtime: $Util.RuntimeOptions): Promise<GetWeChSearchResponse>;
    getWeChSearch(request: GetWeChSearchRequest): Promise<GetWeChSearchResponse>;
    getWsChGeneralWithOptions(request: GetWsChGeneralRequest, runtime: $Util.RuntimeOptions): Promise<GetWsChGeneralResponse>;
    getWsChGeneral(request: GetWsChGeneralRequest): Promise<GetWsChGeneralResponse>;
    getWsCustomizedChEcomCommentWithOptions(request: GetWsCustomizedChEcomCommentRequest, runtime: $Util.RuntimeOptions): Promise<GetWsCustomizedChEcomCommentResponse>;
    getWsCustomizedChEcomComment(request: GetWsCustomizedChEcomCommentRequest): Promise<GetWsCustomizedChEcomCommentResponse>;
    getWsCustomizedChEcomContentWithOptions(request: GetWsCustomizedChEcomContentRequest, runtime: $Util.RuntimeOptions): Promise<GetWsCustomizedChEcomContentResponse>;
    getWsCustomizedChEcomContent(request: GetWsCustomizedChEcomContentRequest): Promise<GetWsCustomizedChEcomContentResponse>;
    getWsCustomizedChEcomTitleWithOptions(request: GetWsCustomizedChEcomTitleRequest, runtime: $Util.RuntimeOptions): Promise<GetWsCustomizedChEcomTitleResponse>;
    getWsCustomizedChEcomTitle(request: GetWsCustomizedChEcomTitleRequest): Promise<GetWsCustomizedChEcomTitleResponse>;
    getWsCustomizedChEntertainmentWithOptions(request: GetWsCustomizedChEntertainmentRequest, runtime: $Util.RuntimeOptions): Promise<GetWsCustomizedChEntertainmentResponse>;
    getWsCustomizedChEntertainment(request: GetWsCustomizedChEntertainmentRequest): Promise<GetWsCustomizedChEntertainmentResponse>;
    getWsCustomizedChGeneralWithOptions(request: GetWsCustomizedChGeneralRequest, runtime: $Util.RuntimeOptions): Promise<GetWsCustomizedChGeneralResponse>;
    getWsCustomizedChGeneral(request: GetWsCustomizedChGeneralRequest): Promise<GetWsCustomizedChGeneralResponse>;
    getWsCustomizedChO2OWithOptions(request: GetWsCustomizedChO2ORequest, runtime: $Util.RuntimeOptions): Promise<GetWsCustomizedChO2OResponse>;
    getWsCustomizedChO2O(request: GetWsCustomizedChO2ORequest): Promise<GetWsCustomizedChO2OResponse>;
    getWsCustomizedSeaEcomWithOptions(request: GetWsCustomizedSeaEcomRequest, runtime: $Util.RuntimeOptions): Promise<GetWsCustomizedSeaEcomResponse>;
    getWsCustomizedSeaEcom(request: GetWsCustomizedSeaEcomRequest): Promise<GetWsCustomizedSeaEcomResponse>;
    getWsCustomizedSeaGeneralWithOptions(request: GetWsCustomizedSeaGeneralRequest, runtime: $Util.RuntimeOptions): Promise<GetWsCustomizedSeaGeneralResponse>;
    getWsCustomizedSeaGeneral(request: GetWsCustomizedSeaGeneralRequest): Promise<GetWsCustomizedSeaGeneralResponse>;
    openAlinlpServiceWithOptions(runtime: $Util.RuntimeOptions): Promise<OpenAlinlpServiceResponse>;
    openAlinlpService(): Promise<OpenAlinlpServiceResponse>;
}
